branches:
  only:
    - master

skip_commits:
  files:
    - images/
    - src/
    - .gitignore
    - LICENSE
    - README.md

environment:
  PsgKey:
    secure: tlhLuUS6x8FcP159+X/EIBDlj9m+u5KCTTuqwzsiNHlPX6K4AolpaZcfAP4ClOdB

install:
  - ps: Import-Module -Force .\PhpManager

build: off

test_script:
  - ps: |
      # Setup
      Set-StrictMode -Version 2.0
      $ProgressPreference = 'SilentlyContinue'
      $ErrorActionPreference = 'Stop'
      # Check that Get-PhpAvailableVersion works
      $latest72 = Get-PhpAvailableVersion -State Release | Where-Object { $_.BaseVersion -match '^7.2\.' -and $_.Architecture -eq 'x86' -and $_.ThreadSafe -eq $true }
      If (-Not($latest72)) { Throw 'PHP release 7.2 not not found!' }
      # Check that Install-Php works
      $installPath = 'C:\Test\PHP'
      Install-Php -Version 7.2.0 -Architecture x86 -ThreadSafe $true -Path $installPath -AddToPath User
      # Check that Get-Php works
      Write-Output 'Version installed:'
      Get-Php -Path $installPath
      If (-Not($Env:Path -like "*$installPath*")) { Throw 'Installation directory not added to PATH' }
      # Check that Update-Php works
      If (-Not(Update-Php -Path $installPath)) { Throw 'PHP not updated!' }
      $installedPhp = Get-Php -Path $installPath
      Write-Output 'Version updated:'
      $installedPhp
      If ($latest72.FullVersion -ne $installedPhp.FullVersion) { Throw 'Wrong new PHP version!' }
      # Check that Update-PhpCAInfo works
      Update-PhpCAInfo -Path $installPath
      # Check that Get-PhpExtension works
      $allExtensions = Get-PhpExtension $installPath
      $builtinExtensions = @($allExtensions | Where-Object { $_.Type -eq 'Builtin' })
      If ($builtinExtensions.Count -eq 0) { Throw 'No PHP builtin extensions found!' }
      Write-Output ('Builtin extensions found: ' + $builtinExtensions.Count)
      $phpExtensions = @($allExtensions | Where-Object { $_.Type -eq 'Php' })
      If ($phpExtensions.Count -eq 0) { Throw 'No PHP extensions found!' }
      Write-Output ('PHP extensions found: ' + $phpExtensions.Count)
      $zendExtensions = @($allExtensions | Where-Object { $_.Type -eq 'Zend' })
      Write-Output ('Zend extensions found: ' + $zendExtensions.Count)
      $enabledExtensions = @($allExtensions | Where-Object { $_.State -eq 'Enabled' })
      If ($enabledExtensions.Count -ne 0) { Throw 'Some PHP extensions (in addition to the builtin ones) are already enabled!' }
      # Check that Enable-PhpExtension works
      Enable-PhpExtension -Extension curl -Path $installPath
      $enabledExtensions = @(Get-PhpExtension $installPath | Where-Object { $_.Type -eq 'Php' -and $_.State -eq 'Enabled' })
      If ($enabledExtensions.Count -ne 1) { Throw 'Expected 1 PHP enabled installation' }
      # Check that Disable-PhpExtension works
      Disable-PhpExtension -Extension curl -Path $installPath
      $enabledExtensions = @(Get-PhpExtension $installPath | Where-Object { $_.Type -eq 'Php' -and $_.State -eq 'Enabled' })
      If ($enabledExtensions.Count -ne 0) { Throw 'Expected 0 PHP enabled installation' }
      # Check that Install-PhpExtension works
      Install-PhpExtension -Extension imagick -MinimumStability snapshot -Path $installPath
      $imagickEnabled = @(Get-PhpExtension $installPath | Where-Object { $_.Handle -eq 'imagick' -and $_.State -eq 'Enabled' })
      $enabledExtensions = @(Get-PhpExtension $installPath | Where-Object { $_.Type -eq 'Php' -and $_.State -eq 'Enabled' })
      If ($enabledExtensions.Count -ne 1) { Throw 'The ImageMagick extension has not been installed and enabled' }
      # Check that Uninstall-Php works
      Uninstall-Php $installPath
      If ($Env:Path -like "*$installPath*") { Throw 'Installation directory not removed from PATH' }

deploy_script:
  - ps: |
      If ($true -eq $Env:APPVEYOR_REPO_TAG -and $Env:APPVEYOR_REPO_TAG_NAME -match '^\d+\.\d+\.\d+$') {
        $newVersion = $Env:APPVEYOR_REPO_TAG_NAME + '.' + $Env:APPVEYOR_BUILD_NUMBER
        Write-Host "Publishing new version: $newVersion"
        $releaseNotes = ''
        $tags = @(& git tag --list --sort=-version:refname)
        If ($tags.Count -lt 2) {
          Write-Host 'Less than 2 tags found: empty release notes'
        } Else {
          $thisTagIndex = [array]::IndexOf($tags, $Env:APPVEYOR_REPO_TAG_NAME)
          If ($thisTagIndex -lt 0) {
            Write-Host 'Unable to find the index of the current tag: empty release notes'
          }
          $previousTag = ''
          For ($tagIndex = $thisTagIndex + 1; $tagIndex -lt $tags.Count; $tagIndex++) {
            If ($tags[$tagIndex] -match '^\d+\.\d+\.\d+$') {
              $previousTag = $tags[$tagIndex]
              break
            }
          }
          If ($previousTag -eq '') {
            Write-Host 'Unable to find the previously published tag: empty release notes'
          } Else {
            $commitMessages = @(& git log --format='- %s' --no-merges --reverse ("$previousTag..." + $Env:APPVEYOR_REPO_TAG_NAME) -- .\PhpManager)
            If ($commitMessages.Count -lt 1) {
              Write-Host 'No relevant commit messages found: empty release notes'
            } Else {
              $releaseNotes = [string]::Join("`n", $commitMessages)
              Write-Host "Release notes:`n$releaseNotes"
            }
          }
        }
        Update-ModuleManifest -Path .\PhpManager\PhpManager.psd1 -ModuleVersion $newVersion -ReleaseNotes $releaseNotes
        Import-Module -Force .\PhpManager
        Publish-Module -Repository PSGallery -Path .\PhpManager -NuGetApiKey $Env:PsgKey -Force
      }
